//flood fill algorithm

class Solution {
    public int numIslands(char[][] grid) {
        List<Set<Integer>> islandList = new ArrayList<>();
        int m = grid.length, n = grid[0].length;
        int count = 0;
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == '1') {
                    islandCheck(i, j, grid);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void islandCheck(int i, int j, char[][] grid) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || (i >= 0 && j >= 0 && grid[i][j] == '0'))
            return;
        
        grid[i][j] = '0';
        
        islandCheck(i-1, j, grid);
        islandCheck(i+1, j, grid);
        islandCheck(i, j-1, grid);
        islandCheck(i, j+1, grid);
    }
}

//union find 
class UnionFind {
    int[] father;  
    int m, n;
    int count = 0;
    UnionFind(char[][] grid) {  
        m = grid.length;  
        n = grid[0].length;  
        father = new int[m*n];  
        for (int i = 0; i < m; i++) {  
            for (int j = 0; j < n; j++) {  
                if (grid[i][j] == '1') {
                    int id = i * n + j;
                    father[id] = id;
                    count++;
                }
            }  
        }  
    }
    public void union(int node1, int node2) {  
        int find1 = find(node1);
        int find2 = find(node2);
        if(find1 != find2) {
            father[find1] = find2;
            count--;
        }
    }
    public int find (int node) {  
        if (father[node] == node) {  
            return node;
        }
        father[node] = find(father[node]);  
        return father[node];
    }
}
