//flood fill algorithm

class Solution {
    public int numIslands(char[][] grid) {
        List<Set<Integer>> islandList = new ArrayList<>();
        int m = grid.length, n = grid[0].length;
        int count = 0;
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == '1') {
                    islandCheck(i, j, grid);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void islandCheck(int i, int j, char[][] grid) {
        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || (i >= 0 && j >= 0 && grid[i][j] == '0'))
            return;
        
        grid[i][j] = '0';
        
        islandCheck(i-1, j, grid);
        islandCheck(i+1, j, grid);
        islandCheck(i, j-1, grid);
        islandCheck(i, j+1, grid);
    }
}

//union find 
class Solution {
    int count = 0;
    public int numIslands(char[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[] root = new int[m * n];
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == '1') {
                    root[i * n + j] = i * n + j;
                }
                else {
                    root[i * n + j] = -1;
                }
            }
        }

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == '1') {
                    count++;
                    int cur = i * n + j;
                    if(i > 0) {
                        int up = (i-1) * n + j;
                        union(cur, up, root);
                    }
                    if(j > 0) {
                        int left = i * n + (j-1);
                        union(cur, left, root);
                    }
                }
            }
        }
        
        return count;
    }

    
    public void union(int current, int old, int[] root) {
        if(root[old] == -1)
            return;
        
        int currentRoot = find(current, root);
        int oldRoot = find(old, root);
        if(oldRoot != currentRoot) {
            root[currentRoot] = oldRoot;
            count --;
        }
    }
    
    public int find(int current, int[] root) {
        if(root[current] == current)
            return current;
        
        return find(root[current], root);
    }
}
